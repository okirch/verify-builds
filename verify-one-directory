#!/bin/bash
#
# Compare two sets of RPMs, and display any differences.
# The list of rpms to compare is expected in _old/rpms.txt and _new/rpms.txt
#

set -e

function build_link_farm {

	dir=$1
	linkdir=$2

	mkdir -p "$linkdir"

	linkdst=$(realpath "$dir")
	ls $dir | grep '\.rpm$' | while read -r longname; do
		shortname=$(rpm --nosignature -q --qf '%{name}.rpm' -p "$dir/$longname")
		ln -sf "$linkdst/$longname" "$linkdir/$shortname"
		echo $shortname
	done | sort
}

function display_list_with_heading {

	HEADING=$1

	cat >_unpacked/list
	if [ -s _unpacked/list ]; then
		echo
		echo "$HEADING"
		sed 's|^|   |' < _unpacked/list
		echo
	fi

	rm -f _unpacked/list
}

function cat_truncate {

	maxlines=$1
	path=$2

	lines=$(wc -l "$path" | (read count rest; echo $count))

	if [ $lines -gt $maxlines ]; then
		head -$maxlines "$path"
		let snipped=$lines-$maxlines
		echo "... $snipped lines more"
		echo
	else
		cat "$path"
	fi
}

function unpack_one_rpm {

	destdir=$1
	rpm=$2

	rpm2cpio "$rpm" | (
		mkdir -p $destdir
		cd $destdir
		cpio --quiet -id
	)

	find $destdir -printf '%P\n' | sort >$destdir.txt
}

function display_file_in {
	dir=$1

	cd $dir
	while read -r name; do
		ls -ld "$name"
	done
}

function record_missing_rpm {

	msg="$1"

	mkdir -p _results

	while read -r name; do
		result="_results/$name"
		echo "$name: $msg"
		echo "$msg" > $result
	done
}

# Given a name like "bash.rpm", compare _links/old/bash.rpm to _links/new/bash.rpm
# This will check whether the version changed. If it did not, unpack the two RPMS
# and compare them file by file.
# Checks include
#	file type (reg, dir, sock, ...)
#	user, group, permissions
#	for regular files: file content
#	for symlinks: target of link
#	for device files: dev major/minor
# The check ignores any change in mtime.
function compare_rpm_old_new {

	name="$1"

	oldrpm="_old/links/$name"
	newrpm="_new/links/$name"

	oldver=$(rpm --nosignature -q --qf '%{version}' -p "$oldrpm")
	newver=$(rpm --nosignature -q --qf '%{version}' -p "$newrpm")
	if [ "$oldver" != "$newver" ]; then
		echo "$name: version changed from $oldver to $newver"
		return
	fi

	oldlogfp=$(rpm --nosignature -q --changelog -p "$oldrpm" | sha1sum -)
	newlogfp=$(rpm --nosignature -q --changelog -p "$newrpm" | sha1sum -)

	if [ "$oldlogfp" != "$newlogfp" ]; then
		echo
		echo "$name: changelog modified"

		mkdir -p _changelog
		rpm --nosignature -q --changelog -p "$oldrpm" >_changelog/old
		rpm --nosignature -q --changelog -p "$newrpm" >_changelog/new
		diff -u _changelog/old _changelog/new | sed 's|^|   |'
		rm -rf _changelog
	fi

	rm -rf _unpacked
	unpack_one_rpm _unpacked/old $oldrpm
	unpack_one_rpm _unpacked/new $newrpm

	comm -23 _unpacked/old.txt _unpacked/new.txt | display_file_in _unpacked/old | display_list_with_heading "Files unique to OLD $name"
	comm -13 _unpacked/old.txt _unpacked/new.txt | display_file_in _unpacked/new | display_list_with_heading "Files unique to NEW $name"

	comm -12 _unpacked/old.txt _unpacked/new.txt | compare_files | display_list_with_heading "$name: files changed"
}

function compare_rpms {

	mkdir -p _results

	while read -r name; do
		result="_results/$name"

		if [ -s "$result" ]; then
			# We already analyzed this in a previous run; so just tell
			# the user it has changed.
			echo "$name: has changes (from previous run; see $result)"
			continue
		fi

		if [ ! -f "$result" ]; then
			compare_rpm_old_new "$name" > _results/temp 2>&1
			mv _results/temp "$result"
		fi

		if [ -s "$result" ]; then
			echo "$name: detected changes"
			cat_truncate 20 "$result"
		else
			echo "$name: unchanged"
		fi
	done
}

function complain_about_file {

	fname="$1"; shift

	echo "$fname: $@"

	(cd _unpacked/old; echo -n "   old: "; ls -ld "$fname")
	(cd _unpacked/new; echo -n "   new: "; ls -ld "$fname")
}

function compare_iattr {

	fname="$1"

	oldval=$(stat -c '%F %a %G %U' "_unpacked/old/$fname")
	newval=$(stat -c '%F %a %G %U' "_unpacked/new/$fname")
	if [ "$oldval" != "$newval" ]; then
		complain_about_file "$fname" "change of file type, permissions or owner"
		return 1
	fi

}

function compare_symlink {

	fname=$1

	oldlink=$(readlink "_unpacked/old/$fname")
	newlink=$(readlink "_unpacked/new/$fname")
	if [ "$oldlink" != "$newlink" ]; then
		complain_about_file "$fname" "change of symlink target"
	fi
}

function compare_device {

	fname=$1

	olddev=$(stat -c '%t:%T' "_unpacked/old/$fname")
	newdedev=$(stat -c '%t:%T' "_unpacked/new/$fname")
	if [ "$olddev" != "$newdev" ]; then
		complain_about_file "$fname" "change device special file"
	fi
}

function compare_regular_file {

	fname=$1

	if ! cmp -s "_unpacked/old/$fname"  "_unpacked/new/$fname"; then
		complain_about_file "$fname" "regular file changed content"
	fi
}

function compare_files {

	while read -r relative_path; do
		old="_unpacked/old/$relative_path"
		new="_unpacked/new/$relative_path"

		if ! compare_iattr "$relative_path"; then
			continue
		fi

		if [ -L "$old" ]; then
			compare_symlink "$relative_path"
		elif [ -b "$old" -o -c "$old" ]; then
			compare_device "$relative_path"
		elif [ -f "$old" ]; then
			compare_regular_file "$relative_path"
		else
			# socket, fifo, directory: nothing to check
			: 
		fi
	done
}

comm -23 _old/rpms.txt _new/rpms.txt | record_missing_rpm "package was REMOVED from build"
comm -13 _old/rpms.txt _new/rpms.txt | record_missing_rpm "package was ADDED to build"

comm -12 _old/rpms.txt _new/rpms.txt | compare_rpms
